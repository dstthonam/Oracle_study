
-- PACKAGE 사용하는 법
SET SERVEROUTPUT ON;  
BEGIN
    DBMS_OUTPUT.PUT_LINE('--PKG_EXAMPLE.FUNC_AFTERTAX(3000)--');
    DBMS_OUTPUT.PUT_LINE('AFTER-TAX : ' || PKG_EXAMPLE.FUNC_AFTERTAX(3000));

    DBMS_OUTPUT.PUT_LINE('--PKG_EXAMPLE.PRO_EMP(7839)--');
    PKG_EXAMPLE.PRO_EMP(7839);

    DBMS_OUTPUT.PUT_LINE('--PKG_EXAMPLE.PRO_DEPT(10)--');
    PKG_EXAMPLE.PRO_DEPT(10);

    DBMS_OUTPUT.PUT_LINE('--PKG_OVERLOAD.PRO_EMP(7839)--');
    PKG_OVERLOAD.PRO_EMP(7839);

    DBMS_OUTPUT.PUT_LINE('--PKG_OVERLOAD.PRO_EMP(''KING'')--');
    PKG_OVERLOAD.PRO_EMP('KING');
END;
/

DROP PACKAGE ;
DROP PACKAGE BODY ;

SELECT * FROM EMP;
SELECT SYSDATE FROM DUAL;

CREATE TABLE EMP_TRG AS SELECT * FROM EMP;

-- DML TRIGGER (BEFORE) 제작 및 사용
SET SERVEROUTPUT ON;
CREATE OR REPLACE TRIGGER TRG_EMP_NODML_WEEKEND
BEFORE
INSERT OR UPDATE OR DELETE ON EMP_TRG

BEGIN
    IF TO_CHAR(SYSDATE, 'DY', 'NLS_DATE_LANGUAGE=KOREAN') IN ('토', '일') THEN
        IF INSERTING THEN
            RAISE_APPLICATION_ERROR(-20000, '주말 사원정보 추가 불가');
        ELSIF UPDATING THEN
            RAISE_APPLICATION_ERROR(-20001, '주말 사원정보 수정 불가');
        ELSIF DELETING THEN
            RAISE_APPLICATION_ERROR(-20002, '주말 사원정보 삭제 불가');
        ELSE 
            RAISE_APPLICATION_ERROR(-20003, '주말 사원정보 변경 불가');
        END IF;
    END IF;
END;
/


-- TRIGGER TEST용
UPDATE EMP_TRG T
    SET T.SAL = 3500 WHERE T.EMPNO = 7839;
ROLLBACK;

CREATE TABLE EMP_TRG_LOG(
    TABLENAME       VARCHAR2(10),
    DML_TYPE        VARCHAR2(10),
    EMPNO           NUMBER(4),
    USER_NAME       VARCHAR2(30),
    CHANGE_DATE     DATE
);


-- DML TRIGGER (AFTER) 제작 및 사용
SET SERVEROUTPUT ON;
CREATE OR REPLACE TRIGGER TRG_EMP_LOG
AFTER
INSERT OR UPDATE OR DELETE ON EMP_TRG
FOR EACH ROW

BEGIN
    IF INSERTING THEN
        INSERT INTO EMP_TRG_LOG
        VALUES ('EMP_TRG', 'INSERT', :NEW.EMPNO, SYS_CONTEXT('USERNEW', 'SESSION_USER'), SYSDATE);

    ELSIF UPDATING THEN
        INSERT INTO EMP_TRG_LOG
        VALUES ('EMP_TRG', 'UPDATE', :OLD.EMPNO, SYS_CONTEXT('USERNEW', 'SESSION_USER'), SYSDATE);

    ELSIF DELETING THEN
        INSERT INTO EMP_TRG_LOG
        VALUES ('EMP_TRG', 'DELETE', :OLD.EMPNO, SYS_CONTEXT('USERNEW', 'SESSION_USER'), SYSDATE);
        
    END IF;
END;
/

-- TRIGGER TEST용
INSERT INTO EMP_TRG
    VALUES(9999, 'TESTEMP', 'CLERK', 7788, TO_DATE(SYSDATE, 'YYYY-MM-DD'), 1200, NULL, 20);

SELECT * FROM EMP_TRG_LOG;
COMMIT;

UPDATE EMP_TRG T
    SET T.SAL = 1300 WHERE T.MGR = 7788;
ROLLBACK;

-- TRIGGER 정보 조회
SELECT TRIGGER_NAME, TRIGGER_TYPE, TRIGGERING_EVENT, TABLE_NAME, STATUS
    FROM USER_TRIGGERS;

-- TRIGGER 상태 비활성화
ALTER TRIGGER TRG_EMP_NODML_WEEKEND DISABLE;

DESC DEPT;

-- PRO_DEPT_IN PROCEDURE 생성 
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE PRO_DEPT_IN(
    V_DEPTNO DEPT.DEPTNO%TYPE
)
IS
    V_DNAME DEPT.DNAME%TYPE;
    V_LOC   DEPT.LOC%TYPE;
BEGIN
    SELECT D.DNAME, D.LOC
        INTO V_DNAME, V_LOC
        FROM DEPT D
        WHERE D.DEPTNO = V_DEPTNO
        ;

    DBMS_OUTPUT.PUT_LINE('DEPTNO : ' || V_DEPTNO);
    DBMS_OUTPUT.PUT_LINE('DNAME : ' || V_DNAME);
    DBMS_OUTPUT.PUT_LINE('LOC : ' || V_LOC);

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('해당하는 정보가 없습니다.');
END PRO_DEPT_IN;
/
-- PRO_DEPT_IN PROCEDURE 실행
DECLARE
    P_DEPTNO NUMBER := 10;
BEGIN
    PRO_DEPT_IN(P_DEPTNO);
END;
/



-- TEST
SELECT TO_CHAR(HIREDATE) FROM EMP;
DESC EMP;
SELECT * FROM EMP;

SELECT FUNC_DATE_KOR(TO_DATE(2025-04-12, 'YY/MM/DD')) FROM DUAL;
SELECT FUNC_DATE_KOR(SYSDATE) FROM DUAL;



-- FUNC_DATE_KOR FUNCTION 생성
SET SERVEROUTPUT ON;
CREATE OR REPLACE FUNCTION FUNC_DATE_KOR(V_PARAM1 DATE)
    RETURN VARCHAR2
IS
    V_YEARS     VARCHAR2(6);
    V_MONTHS    VARCHAR2(4);
    V_DAYS      VARCHAR2(4);
    V_PARAM2    VARCHAR2(14);
    
BEGIN
    V_YEARS := TO_CHAR(V_PARAM1, 'YYYY') || '년';
    V_MONTHS := TO_CHAR(V_PARAM1, 'MM') || '월';
    V_DAYS := TO_CHAR(V_PARAM1, 'DD') || '일';
        
    V_PARAM2 := V_YEARS || V_MONTHS || V_DAYS;
    
    RETURN V_PARAM2;
END FUNC_DATE_KOR;
/

CREATE OR REPLACE FUNCTION FUNC_DATE_KOR(V_PARAM1 DATE)
RETURN VARCHAR2
IS
BEGIN
    RETURN TO_CHAR(V_PARAM1, 'YYYY"년"MM"월"DD"일"');
END;
/

-- FUNC_DATE_KOR FUNCTION 실행
SELECT E.ENAME,
       FUNC_DATE_KOR(E.HIREDATE) AS HIREDATE
    FROM EMP E
    WHERE E.EMPNO = 7839;


-- TEST TABLE 생성
CREATE TABLE DEPT_TRG
AS SELECT * FROM DEPT;

CREATE TABLE DEPT_TRG_LOG (
    TABLENAME       VARCHAR2(10),
    DML_TYPE        VARCHAR2(10),
    DEPTNO          NUMBER(2),
    USER_NAME       VARCHAR2(30),
    CHANGE_DATE     DATE
)
;


-- TRIGGER 생성
SET SERVEROUTPUT ON;
CREATE OR REPLACE TRIGGER TRG_DEPT_LOG
    AFTER
    INSERT OR UPDATE OR DELETE ON DEPT_TRG
    FOR EACH ROW
DECLARE
    
BEGIN
    IF INSERTING THEN
        INSERT INTO DEPT_TRG_LOG
            VALUES('DEPT_TRG', 'INSERT', :NEW.DEPTNO, 
                    SYS_CONTEXT('USERENV', 'SESSION_USER'),SYSDATE);

    ELSIF UPDATING THEN
        INSERT INTO DEPT_TRG_LOG
            VALUES('DEPT_TRG', 'UPDATE', :OLD.DEPTNO, 
                    SYS_CONTEXT('USERENV', 'SESSION_USER'),SYSDATE);
            
    ELSIF DELETING THEN
        INSERT INTO DEPT_TRG_LOG
            VALUES('DEPT_TRG', 'DELETE', :OLD.DEPTNO, 
                    SYS_CONTEXT('USERENV', 'SESSION_USER'),SYSDATE);

    END IF;
END;
/

DESC DEPT_TRG_LOG;


--TEST DATA
INSERT INTO DEPT_TRG 
    VALUES(99, 'TEST_DNAME', 'SEOUL');

UPDATE DEPT_TRG 
    SET LOC = 'TEST_LOC' 
    WHERE DEPTNO = 99;

DELETE FROM DEPT_TRG 
    WHERE DEPTNO = 99;

SELECT * FROM DEPT_TRG;
SELECT * FROM DEPT_TRG_LOG;



DROP TRIGGER TRG_DEPT_LOG;
SELECT * FROM USER_TRIGGERS;

COMMIT;
ROLLBACK;