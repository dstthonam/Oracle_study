SET SERVEROUTPUT ON SIZE UNLIMITED;  

-- 집계 함수 사용
SELECT COUNT(DISTINCT DEPARTMENT_ID) FROM EMPLOYEES E 
    ;

SELECT SUM(DISTINCT E.SALARY) FROM EMPLOYEES E;

SELECT E.DEPARTMENT_ID, SUM(E.SALARY) FROM EMPLOYEES E
    GROUP BY DEPARTMENT_ID
    ORDER BY DEPARTMENT_ID
    ;

SELECT K.PERIOD, K.GUBUN, SUM(K.LOAN_JAN_AMT) AS TOTL_JAN
    FROM KOR_LOAN_STATUS K
    WHERE K.PERIOD LIKE '2013%'
    GROUP BY K.PERIOD, K.GUBUN
    ORDER BY K.PERIOD
    ;

SELECT K.PERIOD, K.GUBUN, SUM(K.LOAN_JAN_AMT) AS TOTL_JAN
    FROM KOR_LOAN_STATUS K
    WHERE K.PERIOD LIKE '2013%'
    GROUP BY ROLLUP(K.PERIOD, K.GUBUN)
    ;

SELECT K.PERIOD, K.GUBUN, SUM(K.LOAN_JAN_AMT) AS TOTL_JAN
    FROM KOR_LOAN_STATUS K
    WHERE K.PERIOD LIKE '2013%'
    GROUP BY K.PERIOD, ROLLUP(K.GUBUN)
    ;

SELECT K.PERIOD, K.GUBUN, SUM(K.LOAN_JAN_AMT) AS TOTL_JAN
    FROM KOR_LOAN_STATUS K
    WHERE K.PERIOD LIKE '2013%'
    GROUP BY GROUPING SETS(K.PERIOD, K.GUBUN)
    ;

SELECT K.PERIOD, K.GUBUN, K.REGION, SUM(K.LOAN_JAN_AMT) AS TOTL_JAN
    FROM KOR_LOAN_STATUS K
    WHERE K.PERIOD LIKE '2013%'
    AND K.REGION IN ('서울', '경기')
    GROUP BY GROUPING SETS(K.PERIOD, K.GUBUN, K.REGION)
    ;

-- 입사년도별 사원 수 구하기
SELECT TO_CHAR(E.HIRE_DATE, 'YYYY'), COUNT(E.HIRE_DATE) FROM EMPLOYEES E
    GROUP BY TO_CHAR(E.HIRE_DATE, 'YYYY')
    ORDER BY 1
    ;

-- KOR_LOAN_STATUS 테이블에서 2012년 월별, 지역별 대출 총 잔액 구하기
SELECT SUBSTR(K.PERIOD, 5, 2) AS MONTHS, K.REGION, SUM(LOAN_JAN_AMT) FROM KOR_LOAN_STATUS K
    WHERE SUBSTR(K.PERIOD, 1, 4) = '2012'
    GROUP BY SUBSTR(K.PERIOD, 5, 2), K.REGION
    ;

SELECT SUBSTR(K.PERIOD, 5, 2) AS MONTHS, K.REGION, SUM(LOAN_JAN_AMT) FROM KOR_LOAN_STATUS K
    WHERE SUBSTR(K.PERIOD, 1, 4) = '2012'
    GROUP BY (SUBSTR(K.PERIOD, 5, 2), K.REGION)
    ;

-- 다음 쿼리를 ROLLUP 사용하지 않고 표현하기
SELECT K.PERIOD, K.GUBUN, SUM(K.LOAN_JAN_AMT) TOTL_JAN
    FROM KOR_LOAN_STATUS K
    WHERE K.PERIOD LIKE '2013%'
    GROUP BY K.PERIOD, ROLLUP(K.GUBUN)
    ;

SELECT K.PERIOD, K.GUBUN, SUM(K.LOAN_JAN_AMT) TOTL_JAN
    FROM KOR_LOAN_STATUS K
    WHERE K.PERIOD LIKE '2013%'
    GROUP BY K.PERIOD, K.GUBUN
UNION 
SELECT K.PERIOD, NULL AS GUBUN, SUM(K.LOAN_JAN_AMT) TOTL_JAN
    FROM KOR_LOAN_STATUS K
    WHERE K.PERIOD LIKE '2013%'
    GROUP BY GROUPING SETS(K.PERIOD)
    ;

-- 다음 쿼리와 집합 연산자로 동일한 결과를 추출하도록 쿼리 작성
SELECT K.PERIOD,
        CASE WHEN K.GUBUN = '주택담보대출' THEN SUM(K.LOAN_JAN_AMT) ELSE 0 END AS 주택담보대출액,
        CASE WHEN K.GUBUN = '기타대출'    THEN SUM(K.LOAN_JAN_AMT) ELSE 0 END AS 기타대출액
    FROM KOR_LOAN_STATUS K
    WHERE K.PERIOD = '201311'
    GROUP BY K.PERIOD, K.GUBUN
    ;

SELECT K.PERIOD,
        SUM(K.LOAN_JAN_AMT) AS 주택담보대출액,
        0 AS 기타대출액
    FROM KOR_LOAN_STATUS K
    WHERE K.GUBUN = '주택담보대출' AND K.PERIOD = '201311'
    GROUP BY K.PERIOD
UNION ALL
SELECT K.PERIOD,
        0 AS 주택담보대출액,
        SUM(K.LOAN_JAN_AMT) AS 기타대출액
    FROM KOR_LOAN_STATUS K
    WHERE K.GUBUN = '기타대출' AND K.PERIOD = '201311'
    GROUP BY K.PERIOD
    ;

-- 지역별 각 월별 대출 총 잔액
SELECT K.REGION, 
        SUM(CASE WHEN K.PERIOD = '201111' THEN K.LOAN_JAN_AMT ELSE 0 END) AS "201111",
        SUM(CASE WHEN K.PERIOD = '201112' THEN K.LOAN_JAN_AMT ELSE 0 END) AS "201112",
        SUM(CASE WHEN K.PERIOD = '201210' THEN K.LOAN_JAN_AMT ELSE 0 END) AS "201210",
        SUM(CASE WHEN K.PERIOD = '201211' THEN K.LOAN_JAN_AMT ELSE 0 END) AS "201211",
        SUM(CASE WHEN K.PERIOD = '201212' THEN K.LOAN_JAN_AMT ELSE 0 END) AS "201212",
        SUM(CASE WHEN K.PERIOD = '201310' THEN K.LOAN_JAN_AMT ELSE 0 END) AS "201310",
        SUM(CASE WHEN K.PERIOD = '201311' THEN K.LOAN_JAN_AMT ELSE 0 END) AS "201311"
    FROM KOR_LOAN_STATUS K
    GROUP BY K.REGION
    ;

SELECT COUNT(*) FROM EMPLOYEES A, DEPARTMENTS B
    WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID;

SELECT COUNT(*) 
    FROM DEPARTMENTS B
    WHERE NOT EXISTS(SELECT *
                    FROM EMPLOYEES A
                    WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID
                    --AND A.SALARY > 3000
                    )
    ORDER BY B.DEPARTMENT_NAME;

SELECT A.DEPARTMENT_ID, A.DEPARTMENT_NAME
    FROM DEPARTMENTS A
    WHERE EXISTS(SELECT 1
                    FROM JOB_HISTORY B
                    WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID)
                    ;

SELECT A.DEPARTMENT_ID, AVG(A.SALARY)
    FROM EMPLOYEES A
    WHERE A.DEPARTMENT_ID IN (SELECT B.DEPARTMENT_ID
                                FROM DEPARTMENTS B
                                WHERE B.PARENT_ID = 90)
    GROUP BY A.DEPARTMENT_ID
    ;
     

SELECT ROUND(AVG(A.AMOUNT_SOLD)) AS YEAR_AVG
    FROM SALES A, CUSTOMERS B, COUNTRIES C
    WHERE A.SALES_MONTH BETWEEN '200001' AND '200012'
    AND A.CUST_ID = B.CUST_ID
    AND B.COUNTRY_ID = C.COUNTRY_ID
    AND C.COUNTRY_NAME = 'Italy'
    ;

SELECT SUBSTR(C.SALES_MONTH, 1, 4) AS YEARS,
        C.EMPLOYEE_ID, SUM(C.AMOUNT_SOLD) AS AMOUNT_SOLD
    FROM COUNTRIES A, CUSTOMERS B, SALES C
    WHERE C.CUST_ID = B.CUST_ID
    AND A.COUNTRY_ID = B.COUNTRY_ID
    AND A.COUNTRY_NAME = 'Italy'
    GROUP BY SUBSTR(C.SALES_MONTH, 1, 4), C.EMPLOYEE_ID
    ;

SELECT Y.YEARS, Y.EMPLOYEE_ID, EMP.EMP_NAME, Z.MX_SOLD
    FROM (SELECT X.YEARS, MAX(X.AMOUNT_SOLD) AS MX_SOLD
            FROM (SELECT SUBSTR(C.SALES_MONTH, 1, 4) AS YEARS,
                        C.EMPLOYEE_ID, SUM(C.AMOUNT_SOLD) AS AMOUNT_SOLD
                    FROM COUNTRIES A, CUSTOMERS B, SALES C
                    WHERE C.CUST_ID = B.CUST_ID
                    AND A.COUNTRY_ID = B.COUNTRY_ID
                    AND A.COUNTRY_NAME = 'Italy'
                    GROUP BY SUBSTR(C.SALES_MONTH, 1, 4), C.EMPLOYEE_ID
                    ) X   
            GROUP BY X.YEARS) Z,
        (SELECT SUBSTR(C.SALES_MONTH, 1, 4) AS YEARS,
                        C.EMPLOYEE_ID, SUM(C.AMOUNT_SOLD) AS AMOUNT_SOLD
                    FROM COUNTRIES A, CUSTOMERS B, SALES C
                    WHERE C.CUST_ID = B.CUST_ID
                    AND A.COUNTRY_ID = B.COUNTRY_ID
                    AND A.COUNTRY_NAME = 'Italy'
                    GROUP BY SUBSTR(C.SALES_MONTH, 1, 4), C.EMPLOYEE_ID
            ) Y,
        EMPLOYEES EMP
    WHERE Y.EMPLOYEE_ID = EMP.EMPLOYEE_ID
    AND Y.YEARS = Z.YEARS
    AND Z.MX_SOLD = Y.AMOUNT_SOLD
    ORDER BY YEARS
    ;

-- 101번 사원 산출
SELECT E.EMPLOYEE_ID, E.EMP_NAME,
        J.JOB_TITLE, JH.START_DATE, JH.END_DATE
    FROM EMPLOYEES E, JOBS J, JOB_HISTORY JH
    WHERE E.EMPLOYEE_ID = JH.EMPLOYEE_ID
    AND J.JOB_ID = JH.JOB_ID
    AND E.EMPLOYEE_ID = 101
    ;

SELECT E.EMPLOYEE_ID, E.EMP_NAME,
        J.JOB_TITLE, JH.START_DATE, JH.END_DATE, D.DEPARTMENT_NAME
    FROM EMPLOYEES E
    INNER JOIN JOB_HISTORY JH ON (JH.EMPLOYEE_ID = E.EMPLOYEE_ID)
    INNER JOIN JOBS J ON (JH.JOB_ID = J.JOB_ID)
    INNER JOIN DEPARTMENTS D ON (E.DEPARTMENT_ID = D.DEPARTMENT_ID)
    WHERE E.EMPLOYEE_ID = 101
    ;

-- ERROR가 나는 이유
SELECT A.EMPLOYEE_ID, A.EMP_NAME, B.JOB_ID, B.DEPARTMENT_ID
    FROM EMPLOYEES A, JOB_HISTORY B
    WHERE A.EMPLOYEE_ID = B.EMPLOYEE_ID(+)
    AND A.DEPARTMENT_ID(+) = B.DEPARTMENT_ID
    ;

-- ANSI 문법 사용용
SELECT A.DEPARTMENT_ID, A.DEPARTMENT_NAME
    FROM DEPARTMENTS A
    INNER JOIN EMPLOYEES B ON (A.DEPARTMENT_ID = B.DEPARTMENT_ID)
    WHERE B.SALARY > 3000
    ORDER BY A.DEPARTMENT_NAME
    ;

-- 연관성이 없는 서브쿼리로 바꾸기
SELECT A.DEPARTMENT_ID, A.DEPARTMENT_NAME
    FROM DEPARTMENTS A
    WHERE EXISTS(SELECT DISTINCT B.DEPARTMENT_ID
                    FROM JOB_HISTORY B)
                    ;

SELECT E.*, JH.*, J.*
    FROM EMPLOYEES E, JOBS J, JOB_HISTORY JH, DEPARTMENTS D
    WHERE E.EMPLOYEE_ID = 101
    ;

-- 최대매출액과 최소매출액 및및 해당 사원 조회
SELECT A.YEARS, A.MX_EMP_ID, A.MX_EMP_NAME, A.MX_SOLD, 
        B.MI_EMP_ID, B.MI_EMP_NAME, B.MI_SOLD
    FROM (
        SELECT X1.YEARS, X1.EMPLOYEE_ID AS MX_EMP_ID, E1.EMP_NAME AS MX_EMP_NAME, TRUNC(X1.AMOUNT_SOLD) AS MX_SOLD
            FROM (SELECT TO_CHAR(S.SALES_DATE, 'YYYY') AS YEARS,
                        S.EMPLOYEE_ID, 
                        SUM(S.AMOUNT_SOLD) AS AMOUNT_SOLD,
                        ROW_NUMBER() OVER(PARTITION BY TO_CHAR(S.SALES_DATE, 'YYYY') ORDER BY SUM(S.AMOUNT_SOLD) DESC) AS RN1
                    FROM SALES S 
                    INNER JOIN CUSTOMERS C ON (C.CUST_ID = S.CUST_ID)
                    INNER JOIN COUNTRIES CN ON (CN.COUNTRY_ID = C.COUNTRY_ID)
                    WHERE CN.COUNTRY_NAME = 'Italy'
                    GROUP BY TO_CHAR(S.SALES_DATE, 'YYYY'), S.EMPLOYEE_ID
                    ) X1
            LEFT OUTER JOIN EMPLOYEES E1 ON (E1.EMPLOYEE_ID = X1.EMPLOYEE_ID)
            WHERE X1.RN1 = 1
        ) A
    INNER JOIN (
        SELECT X2.YEARS, X2.EMPLOYEE_ID AS MI_EMP_ID, E2.EMP_NAME AS MI_EMP_NAME, TRUNC(X2.AMOUNT_SOLD) AS MI_SOLD
            FROM (SELECT TO_CHAR(S.SALES_DATE, 'YYYY') AS YEARS,
                        S.EMPLOYEE_ID,
                        SUM(S.AMOUNT_SOLD) AS AMOUNT_SOLD, 
                        ROW_NUMBER() OVER(PARTITION BY TO_CHAR(S.SALES_DATE, 'YYYY') ORDER BY SUM(S.AMOUNT_SOLD) ASC) AS RN2
                    FROM SALES S 
                    INNER JOIN CUSTOMERS C ON (C.CUST_ID = S.CUST_ID)
                    INNER JOIN COUNTRIES CN ON (CN.COUNTRY_ID = C.COUNTRY_ID)
                    WHERE CN.COUNTRY_NAME = 'Italy'
                    GROUP BY TO_CHAR(S.SALES_DATE, 'YYYY'), S.EMPLOYEE_ID
                    ) X2 
            LEFT OUTER JOIN EMPLOYEES E2 ON (E2.EMPLOYEE_ID = X2.EMPLOYEE_ID)
            WHERE X2.RN2 = 1
        ) B ON (A.YEARS = B.YEARS)
    ;

SELECT *
    FROM --COUNTRIES CN,
        --CUSTOMERS C, 
        --SALES S, 
        EMPLOYEES E
    --WHERE E.EMPLOYEE_ID = 1
    ORDER BY 1
    ;
